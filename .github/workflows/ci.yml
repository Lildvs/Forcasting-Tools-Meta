name: Forecasting Tools CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd forecasting-tools
          pip install -e ".[dev]"
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Lint with flake8
        run: |
          cd forecasting-tools
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          cd forecasting-tools
          black --check .
          
      - name: Type check with mypy
        run: |
          cd forecasting-tools
          mypy forecasting_tools
          
      - name: Run unit tests
        run: |
          cd forecasting-tools
          pytest tests/unit -v
          
      - name: Run integration tests
        run: |
          cd forecasting-tools
          pytest tests/integration -v

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd forecasting-tools
          pip install -e ".[dev]"
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Run evaluation benchmarks
        run: |
          cd forecasting-tools
          python -m forecasting_tools.evaluation.benchmark --fixtures-dir ../tests/fixtures --output-dir ./benchmark-results
          
      - name: Archive benchmark results
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-results
          path: forecasting-tools/benchmark-results/

  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, benchmark]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          cd forecasting-tools
          python -m build
          
      - name: Run package tests
        run: |
          pip install forecasting-tools/dist/*.whl
          python -c "import forecasting_tools; print(forecasting_tools.__version__)"
          
      - name: Publish to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          cd forecasting-tools
          twine upload dist/*

  docs:
    name: Build and Deploy Docs
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          cd forecasting-tools
          pip install -e .
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html 